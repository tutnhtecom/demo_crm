var ip,
    dataJsep,
    checkRegistered,
    checkReject,
    referId,
    server = null;
const rndInt = Math.floor(100 * Math.random()) + 1;
server =
    rndInt % 2 == 0
        ? "https://janus3.voip24h.vn/janus"
        : "https://janus4.voip24h.vn/janus";
var iceServers = null,
    janus = null,
    sipcall = null,
    opaqueId = "siptest-" + Janus.randomString(12),
    localTracks = {};
remoteTracks = {};
var registered = !1,
    helpers = {},
    helpersCount = 0,
    incoming = null,
    checkHold = null,
    doAudio = !0,
    offerlessInvite = !1,
    checkDevice = !0;
function initGateWay(e) {
    Janus.init({
        debug: "all",
        callback: function () {
            if (!Janus.isWebrtcSupported()) {
                e("isWebrtcSupported", [{ message: "No WebRTC support..." }]);
                return;
            }
            let r =
                    ["iPad", "iPhone", "iPod"].indexOf(navigator.platform) >= 0
                        ? "pagehide"
                        : "beforeunload",
                n = window["on" + r];
            window.addEventListener(r, function () {
                for (let r in (e("closing", !0), Janus.sessions))
                    Janus.sessions[r] &&
                        Janus.sessions[r].destroyOnUnload &&
                        (Janus.log("Destroying session " + r),
                        Janus.sessions[r].destroy({
                            unload: !0,
                            notifyDestroyed: !1,
                        }));
                n && "function" == typeof n && n();
            }),
                (janus = new Janus({
                    server: server,
                    iceServers: iceServers,
                    success: function () {
                        janus.attach({
                            plugin: "janus.plugin.sip",
                            opaqueId: opaqueId,
                            success: function (r) {
                                (sipcall = r),
                                    Janus.log(
                                        "Plugin attached! (" +
                                            sipcall.getPlugin() +
                                            ", id=" +
                                            sipcall.getId() +
                                            ")"
                                    ),
                                    e("init", "Init success");
                            },
                            error: function (e) {
                                Janus.error(
                                    "  -- Error attaching plugin...",
                                    e
                                );
                            },
                            consentDialog: function (e) {
                                Janus.debug(
                                    "Consent dialog should be " +
                                        (e ? "on" : "off") +
                                        " now"
                                );
                            },
                            iceState: function (e) {
                                Janus.log("ICE state changed to " + e);
                            },
                            mediaState: function (e, r, n) {
                                Janus.log(
                                    "Janus " +
                                        (r ? "started" : "stopped") +
                                        " receiving our " +
                                        e +
                                        " (mid=" +
                                        n +
                                        ")"
                                );
                            },
                            webrtcState: function (e) {
                                Janus.log(
                                    "Janus says our WebRTC PeerConnection is " +
                                        (e ? "up" : "down") +
                                        " now"
                                );
                            },
                            slowLink: function (e, r, n) {
                                Janus.warn(
                                    "Janus reports problems " +
                                        (e ? "sending" : "receiving") +
                                        " packets on mid " +
                                        n +
                                        " (" +
                                        r +
                                        " lost packets)"
                                );
                            },
                            onmessage: function (r, n) {
                                if (
                                    (Janus.debug(" ::: Got a message :::", r),
                                    r.error)
                                ) {
                                    registered && sipcall.hangup();
                                    return;
                                }
                                var s = r.call_id,
                                    i = r.result;
                                if (i && i.event) {
                                    var a = i.event;
                                    if ("registration_failed" === a) {
                                        (checkRegistered = ""),
                                            Janus.warn(
                                                "Registration failed: " +
                                                    i.code +
                                                    " " +
                                                    i.reason
                                            ),
                                            e(
                                                "register",
                                                "registration_failed"
                                            );
                                        return;
                                    }
                                    if ("registered" === a) {
                                        (checkRegistered = "registered"),
                                            Janus.log(
                                                "Successfully registered as " +
                                                    i.username +
                                                    "!"
                                            ),
                                            (registered = !0);
                                        let o = document.createElement("div");
                                        (o.innerHTML =
                                            '<div class="hide" id="audiostream"></div>'),
                                            document.body.insertAdjacentElement(
                                                "afterbegin",
                                                o
                                            ),
                                            e("register", "registered_success");
                                    } else if ("calling" === a)
                                        e("calling", [
                                            "calling",
                                            { callId: s },
                                        ]),
                                            Janus.log(
                                                "Waiting for the peer to answer..."
                                            );
                                    else if ("incomingcall" === a) {
                                        Janus.log(
                                            "Incoming call from " +
                                                i.username +
                                                "!"
                                        ),
                                            (sipcall.callId = s);
                                        var t = i.username
                                            .split(":")[1]
                                            .split("@")[0];
                                        (doAudio = !0),
                                            n
                                                ? ((doAudio =
                                                      n.sdp.indexOf(
                                                          "m=audio "
                                                      ) > -1),
                                                  Janus.debug(
                                                      "Audio " +
                                                          (doAudio
                                                              ? "has"
                                                              : "has NOT") +
                                                          " been negotiated"
                                                  ))
                                                : (Janus.log(
                                                      "This call doesn't contain an offer... we'll need to provide one ourselves"
                                                  ),
                                                  (offerlessInvite = !0));
                                        var l = "",
                                            c = i.referred_by;
                                        c &&
                                            (l = (l = (l =
                                                " (referred by " +
                                                c +
                                                ")").replace(
                                                RegExp("<", "g"),
                                                "&lt"
                                            )).replace(
                                                RegExp(">", "g"),
                                                "&gt"
                                            ));
                                        var d = "",
                                            u = i.srtp;
                                        "sdes_optional" === u
                                            ? (d = " (SDES-SRTP offered)")
                                            : "sdes_mandatory" === u &&
                                              (d = " (SDES-SRTP mandatory)");
                                        var p = "";
                                        offerlessInvite &&
                                            (p = " (no SDP offer provided)"),
                                            (dataJsep = n),
                                            e("incomingcall", [
                                                { phonenumber: t },
                                                { callid: s },
                                            ]);
                                    } else if ("accepting" === a);
                                    else if ("progress" === a)
                                        Janus.log(
                                            "There's early media from " +
                                                i.username +
                                                ", wairing for the call!",
                                            n
                                        ),
                                            n &&
                                                sipcall.handleRemoteJsep({
                                                    jsep: n,
                                                    error: hangUp,
                                                }),
                                            e("progress", "Connecting...");
                                    else if ("accepted" === a)
                                        Janus.log(
                                            i.username + " accepted the call!",
                                            n
                                        ),
                                            n &&
                                                sipcall.handleRemoteJsep({
                                                    jsep: n,
                                                    error: hangUp,
                                                }),
                                            e("accepted", "accepted_the_call"),
                                            (sipcall.callId = s);
                                    else if ("transfer" === a) {
                                        e("transfer", "transfering"),
                                            i.refer_to;
                                        var c = i.referred_by
                                            ? i.referred_by
                                            : "an unknown party";
                                        referId = i.refer_id;
                                        var g = i.replaces,
                                            p = "referred by " + c;
                                        g && (p += ", replaces call-ID " + g),
                                            (p = (p = p.replace(
                                                RegExp("<", "g"),
                                                "&lt"
                                            )).replace(
                                                RegExp(">", "g"),
                                                "&gt"
                                            ));
                                    } else
                                        "hangup" === a &&
                                            (Janus.log(
                                                "Call hang up (" +
                                                    i.code +
                                                    " " +
                                                    i.reason +
                                                    ")!"
                                            ),
                                            "Busy Here" == i.reason
                                                ? e("reject", "reject")
                                                : "to BYE" == i.reason
                                                ? e("hangup", "employer_hangup")
                                                : "Session Terminated" ==
                                                  i.reason
                                                ? e("hangup", "customer_hangup")
                                                : "Request Terminated" ==
                                                  i.reason
                                                ? e("missed", "missed")
                                                : e("hangup", "hangup"),
                                            sipcall.hangup());
                                    "holding" === a
                                        ? ((checkHold = "holding"),
                                          e("holding", "holding"))
                                        : ((checkHold = ""),
                                          e("holding", "unholding"));
                                }
                            },
                            onlocaltrack: function (e, r) {
                                Janus.debug(
                                    "Local track " +
                                        (r ? "added" : "removed") +
                                        ":",
                                    e
                                );
                                var n = e.id.replace(/[{}]/g, "");
                                if (!r) {
                                    var s = localTracks[n];
                                    if (s)
                                        try {
                                            var i = s.getTracks();
                                            for (var a in i) {
                                                var o = i[a];
                                                o && o.stop();
                                            }
                                        } catch (t) {}
                                    delete localTracks[n];
                                    return;
                                }
                                var s = localTracks[n];
                                !s &&
                                    (e.kind,
                                    "completed" !==
                                        sipcall.webrtcStuff.pc
                                            .iceConnectionState &&
                                        sipcall.webrtcStuff.pc
                                            .iceConnectionState);
                            },
                            onremotetrack: function (e, r, n) {
                                if (
                                    (Janus.debug(
                                        "Remote track (mid=" +
                                            r +
                                            ") " +
                                            (n ? "added" : "removed") +
                                            ":",
                                        e
                                    ),
                                    !n)
                                ) {
                                    $("#peervideom" + r).remove(),
                                        delete remoteTracks[r];
                                    return;
                                }
                                "audio" === e.kind &&
                                    ((stream = new MediaStream([e])),
                                    (remoteTracks[r] = stream),
                                    Janus.log(
                                        "Created remote audio stream:",
                                        stream
                                    ),
                                    $("#audiostream").append(
                                        '<audio class="hide" id="peervideom' +
                                            r +
                                            '" autoplay playsinline/>'
                                    ),
                                    Janus.attachMediaStream(
                                        $("#peervideom" + r).get(0),
                                        stream
                                    ));
                            },
                            oncleanup: function () {
                                Janus.log(
                                    " ::: Got a cleanup notification :::"
                                ),
                                    $("#audiostream").empty(),
                                    sipcall &&
                                        (delete sipcall.callId,
                                        delete sipcall.doAudio),
                                    (localTracks = {}),
                                    (remoteTracks = {});
                            },
                        });
                    },
                    error: function (r) {
                        Janus.error(r),
                            e("error", [{ message: "Service failed " + r }]),
                            "Lost connection to the server (is it down?)" ==
                                r && e("error", "server_down");
                    },
                    destroyed: function () {
                        window.addEventListener("beforeunload", function (r) {
                            e("closing", !0);
                        }),
                            e("destroyed", "destroyed");
                    },
                }));
        },
    });
}
async function registerSip(e, r, n) {
    var s = null,
        i = null,
        a = null,
        o = null;
    (ip = e),
        (s = "sip:" + e),
        (i = "sip:" + r + "@" + e),
        (a = n),
        (o = { request: "register", username: i });
    var t = r;
    "" !== t && (o.authuser = t);
    var l = r;
    "" !== l && (o.display_name = l),
        (o.secret = a),
        (o.proxy = s),
        sipcall.send({ message: o });
}
async function call(e) {
    if ((console.log(isRegistered()), !0 != isRegistered()))
        return console.log("You must be register SIP before call !!!"), !1;
    var r = sipcall,
        n = null;
    (n = "sip:" + e + "@" + ip),
        (r.doAudio = !0),
        r.createOffer({
            tracks: [{ type: "audio", capture: !0, recv: !0 }],
            success: function (e) {
                Janus.debug("Got SDP!", e);
                var s = { request: "call", uri: n };
                (s.autoaccept_reinvites = !1), r.send({ message: s, jsep: e });
            },
            error: function (e) {
                $.notify("Vui lòng kết nối micro", "error");  
                Janus.error("WebRTC error...", e);
                String(e).includes("Requested device not found") &&
                    (checkDevice = !1);
            },
        });
}
function hangUp() {
    var e,
        e = { request: "hangup" };
    sipcall.send({ message: e }), sipcall.hangup();
}
function reject() {
    var e = { request: "decline", refer_id: referId };
    sipcall.send({ message: e });
}
function answer() {
    incoming = null;
    var e = offerlessInvite ? sipcall.createOffer : sipcall.createAnswer;
    let r = [];
    doAudio && r.push({ type: "audio", capture: !0, recv: !0 }),
        console.log(dataJsep),
        e({
            jsep: dataJsep,
            tracks: r,
            success: function (e) {
                Janus.debug(
                    "Got SDP " + e.type + "! audio=" + doAudio + ":",
                    e
                ),
                    (sipcall.doAudio = doAudio);
                var r = { request: "accept" };
                (r.autoaccept_reinvites = !1),
                    sipcall.send({ message: r, jsep: e });
            },
            error: function (e) {
                Janus.error("WebRTC error:", e),
                    sipcall.send({
                        message: { request: "decline", code: 480 },
                    });
            },
        });
}
function toggleHold() {
    "holding" != checkHold
        ? sipcall.send({ message: { request: "hold", direction: "sendonly" } })
        : sipcall.send({ message: { request: "unhold" } });
}
function toggleMute() {
    let e = sipcall.isAudioMuted();
    Janus.log((e ? "Unmuting" : "Muting") + " local stream..."),
        e ? sipcall.unmuteAudio() : sipcall.muteAudio(),
        (e = sipcall.isAudioMuted());
}
function transfer(e) {
    var r = "sip:" + e + "@" + ip;
    console.log(r),
        "" !== r &&
            (sipcall.send({ message: { request: "transfer", uri: r } }),
            setTimeout(function () {
                hangUp();
            }, 2e3));
}
function sendDtmf(e) {
    sipcall.dtmf({ dtmf: { tones: e } });
}
function isMute() {
    return sipcall.isAudioMuted();
}
function isHold() {
    return "holding" == checkHold;
}
function isRegistered() {
    return "registered" == checkRegistered;
}
function hasCheckDevice() {
    return new Promise(function (e, r) {
        setTimeout(function () {
            e(checkDevice);
        }, 500);
    });
}
function release() {
    janus.destroy(),
        (server = ""),
        (iceServers = ""),
        (janus = ""),
        (sipcall = ""),
        (opaqueId = ""),
        (localTracks = {}),
        (remoteTracks = {}),
        (registered = !1),
        (helpers = {}),
        (helpersCount = 0),
        (incoming = ""),
        (checkHold = ""),
        (ip = ""),
        (doAudio = ""),
        (dataJsep = ""),
        (offerlessInvite = ""),
        (checkRegistered = "");
}

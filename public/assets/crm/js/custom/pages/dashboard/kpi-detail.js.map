{"version":3,"names":[],"mappings":"","sources":["pages/dashboard/kpi-detail.js"],"sourcesContent":["'use strict';\nvar TI_Overview = function () {\n  var getOrCreateLegendList = (chart, id) => {\n    const legendContainer = document.getElementById(id);\n    let listContainer = legendContainer.querySelector('ul');\n  \n    if (!listContainer) {\n      listContainer = document.createElement('ul');\n      listContainer.style.display = 'flex';\n      listContainer.style.flexDirection = 'column';\n      listContainer.style.margin = 0;\n      listContainer.style.padding = 0;\n  \n      legendContainer.appendChild(listContainer);\n    }\n  \n    return listContainer;\n  };\n  var htmlLegendPlugin = {\n    id: 'htmlLegend',\n    afterUpdate(chart, args, options) {\n      const ul = getOrCreateLegendList(chart, options.containerID);\n\n      // Remove old legend items\n      while (ul.firstChild) {\n        ul.firstChild.remove();\n      }\n\n      // Reuse the built-in legendItems generator\n      const items = chart.options.plugins.legend.labels.generateLabels(chart);\n\n      items.forEach(item => {\n        const li = document.createElement('li');\n        li.style.alignItems = 'center';\n        li.style.cursor = 'pointer';\n        li.style.display = 'flex';\n        li.style.flexDirection = 'row';\n        li.style.marginLeft = '10px';\n        li.style.marginBottom = '10px';\n        li.className = 'fs-4';\n\n        li.onclick = () => {\n          const {type} = chart.config;\n          if (type === 'pie' || type === 'doughnut') {\n            // Pie and doughnut charts only have a single dataset and visibility is per item\n            chart.toggleDataVisibility(item.index);\n          } else {\n            chart.setDatasetVisibility(item.datasetIndex, !chart.isDatasetVisible(item.datasetIndex));\n          }\n          chart.update();\n        };\n\n        // Color box\n        const boxSpan = document.createElement('span');\n        boxSpan.style.background = item.fillStyle;\n        boxSpan.style.borderColor = item.strokeStyle;\n        boxSpan.style.borderWidth = item.lineWidth + 'px';\n        boxSpan.style.display = 'inline-block';\n        boxSpan.style.flexShrink = 0;\n        boxSpan.style.height = '20px';\n        boxSpan.style.marginRight = '10px';\n        boxSpan.style.width = '20px';\n        boxSpan.style.borderRadius = '4px';\n\n        // Text\n        const textContainer = document.createElement('p');\n        textContainer.style.color = item.fontColor;\n        textContainer.style.margin = 0;\n        textContainer.style.padding = 0;\n        textContainer.style.textDecoration = item.hidden ? 'line-through' : '';\n\n        const text = document.createTextNode(item.text);\n        textContainer.appendChild(text);\n\n        li.appendChild(boxSpan);\n        li.appendChild(textContainer);\n        ul.appendChild(li);\n      });\n    }\n  }\n  var initialChart = function() {\n      var ctx = document.getElementById('ti_overview_chart_demo');\n      // Get table above current element\n      var table = ctx.previousElementSibling;\n      var lastRow = table.rows[ table.rows.length - 1 ];\n      var lastRowHeight = lastRow.offsetHeight;\n\n      ctx.style.bottom = lastRowHeight + 'px';\n      // Define colors\n      var chartColor = TI_Util.getCssVariableValue('--bs-text-gray-300');\n\n      if (ctx.getAttribute('data-color-variable')) {\n          chartColor = TI_Util.getCssVariableValue(ctx.getAttribute('data-color-variable'));\n      }\n\n      if (ctx.getAttribute('data-color')) {\n          chartColor = ctx.getAttribute('data-color');\n      }\n      \n\n      // Chart labels\n      const labels = ['1', '2', '3', '4', '5', '6', '7', '8'];\n\n      // Chart data\n      const data = {\n          labels: labels,\n          datasets: [{\n              label: 'dataset',\n              data: [\n                  90,\n                  20,\n                  30,\n                  40,\n                  90,\n                  20,\n                  30,\n                  40\n              ],\n              borderColor: chartColor,\n              \n              fill: true,\n              borderWidth: 0,\n              lineTension: 0.4,\n              backgroundColor: [\n                  chartColor\n              ],\n              hoverOffset: 0\n            }]\n      };\n\n      const config = {\n          type: 'line',\n          data: data,\n          options: {\n            animation: {\n              onComplete: function() {\n                \n                \n              }\n            },\n            responsive: true,\n            plugins: {\n              tooltip: {\n                enabled: false\n              },\n              legend: {\n                display: false\n              },\n              filler: {\n                propagate: false,\n              },\n              title: {\n                display: false,\n              }\n            },\n            scales: {\n              x: {\n                display: false,\n                \n                },\n                y: {\n                    display: false\n              }\n            },\n        \n            elements: {\n                point:{\n                    radius: 0\n                }\n            },\n            interaction: {\n              intersect: false,\n            }\n          },\n        };\n\n      \n      // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\n      return new Chart(ctx, config);\n  }\n\n  var initialChart2 = function() {\n    var ctx = document.getElementById('ti_overview_chart_demo_2');\n\n    var color1 = TI_Util.getCssVariableValue('--bs-text-gray-400');\n    var color2 = TI_Util.getCssVariableValue('--bs-text-success');\n\n    const labels = [\n      'Khoa đào tạo sau đại học',\n      'Khoa Công nghệ Thông tin',\n      'Khoa kinh tế và Quản lý công',\n      'Khoa Tài chính - Ngân hàng',\n      'Khoa Khoa học cơ bản',\n      'Khoa Đào tạo Đặc biệt',\n      'Khoa Kế toán - Kiểm toán',\n      'Khoa Ngoại ngữ',\n      'Khoa Xây dựng',\n      'Khoa Công nghệ Sinh học',\n      'Khoa Luật',\n      'Khoa XHH - CTXH - ĐNA'\n    ];\n    // Chart data\n    const data = {\n      labels: labels,\n      datasets: [\n        {\n          label: 'Học phí dự kiến',\n          data: [\n              90,\n              20,\n              30,\n              40,\n              10,\n              20,\n              30,\n              40,\n              30,\n              20,\n              30,\n              40\n          ],\n          backgroundColor: color1\n        },\n        {\n          label: 'Học phí thu về',\n          data: [\n            60,\n            50,\n            30,\n            70,\n            20,\n            10,\n            70,\n            60,\n            30,\n            60,\n            20,\n            90\n          ],\n          backgroundColor: color2\n        }\n      ]\n    };\n    const config = {\n      type: 'bar',\n      data: data,\n      plugins: [{\n        id: \"htmlLegend\",\n        afterUpdate: function(chart, agrs, options) {\n          const legendContainer = document.getElementById(options.containerID);\n          // Remove old legend\n          legendContainer.innerHTML = '';\n          // Reuse the built-in legendItems generator\n          const items = chart.options.plugins.legend.labels.generateLabels(chart);\n\n          items.forEach(function(item) {\n            const wrapperDiv = document.createElement('div');\n            wrapperDiv.className = 'd-none d-md-flex align-items-center pe-4';\n            const formCheckDiv = document.createElement('div');\n            formCheckDiv.className = 'form-check form-switch form-check-custom form-switch-sm';\n            const input = document.createElement('input');\n            input.className = 'form-check-input';\n            input.type = 'checkbox';\n            // input.checked = 'checked';\n            input.checked = chart.isDatasetVisible(item.datasetIndex);\n            input.id = 'flexSwitchCheckChecked_' + item.datasetIndex;\n            input.onchange = (elm, event) => {\n              const {type} = chart.config;\n              if (type === 'pie' || type === 'doughnut') {\n                // Pie and doughnut charts only have a single dataset and visibility is per item\n                chart.toggleDataVisibility(item.index);\n              } else {\n                chart.setDatasetVisibility(item.datasetIndex, !chart.isDatasetVisible(item.datasetIndex));\n              }\n             \n              chart.update();\n            };\n            const label = document.createElement('label');\n            label.className = 'form-check-label';\n            label.for = 'flexSwitchCheckChecked' + item.datasetIndex;\n            const text = document.createTextNode(item.text);\n            label.style.color = item.fillStyle;\n            label.appendChild(text);\n            formCheckDiv.appendChild(input);\n            formCheckDiv.appendChild(label);\n            wrapperDiv.appendChild(formCheckDiv);\n\n            legendContainer.appendChild(wrapperDiv);\n          });\n        }\n      }],\n      options: {\n        maintainAspectRatio: false,\n        indexAxis: 'y',\n        // Elements options apply to all of the options unless overridden in a dataset\n        // In this case, we are setting the border of each horizontal bar to be 2px wide\n        elements: {\n          bar: {\n            borderWidth: 0,\n          }\n        },\n        layout: {\n          padding: {\n              right: 20\n          }\n        },\n        responsive: true,\n        plugins: {\n          legend: {\n            display: false\n          },\n          title: {\n            display: false\n          },\n          // ChartJs labels plugins: see https://github.com/DavideViolante/chartjs-plugin-labels/\n          labels: {\n            // render: function(args) {\n            //     return args.value.label;\n            // },\n            render: 'value',\n            // fontSize: 12,\n            arc: false,\n            precision: 0,\n            // outsidePadding: -18,\n            textMargin: -6,\n            textHorizontalMargin: 12\n          },\n          htmlLegend: {\n            containerID: 'ti_overview_chart_legend_2'\n          }\n        },\n        scales: {\n          x: {\n            grid: {\n              display: false\n            },\n            title: {\n              display: true,\n              text: '(Triệu VND)',\n              margin: {top: 0, left: 0, right: '80%', bottom: 0}\n            }\n            },\n        }\n      },\n    };\n    // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\n    return new Chart(ctx, config);\n  }\n\n  var initialChart3 = function() {\n    var ctx = document.getElementById('ti_overview_chart_demo_3');\n\n    var color1 = TI_Util.getCssVariableValue('--bs-text-secondary');\n    var color2 = TI_Util.getCssVariableValue('--bs-text-danger');\n    var color3 = TI_Util.getCssVariableValue('--bs-text-warning');\n    var color4 = TI_Util.getCssVariableValue('--bs-text-success');\n    var color5 = TI_Util.getCssVariableValue('--bs-text-primary');\n\n    const labels = [\n      'Facebook',\n      'Website',\n      'Landing page',\n      'Tờ rơi',\n      'Youtube'\n    ];\n    // Chart data\n    const data = {\n      labels: labels,\n      datasets: [\n        {\n          label: 'data1',\n          data: [\n              758,\n              580,\n              975,\n              430,\n              590\n          ],\n          backgroundColor: [\n            color1, color2, color3, color4, color5\n          ]\n        }\n      ]\n    };\n    const config = {\n      type: 'bar',\n      data: data,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        elements: {\n          bar: {\n            borderWidth: 2,\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          },\n          title: {\n            display: false\n          },\n          // ChartJs labels plugins: see https://github.com/DavideViolante/chartjs-plugin-labels/\n          labels: {\n            render: 'value',\n            precision: 0,\n            // textMargin: -6,\n            // textHorizontalMargin: 12\n          }\n        },\n        scales: {\n          y: {\n            \n            title: {\n              display: true,\n              text: '(Người)'\n            }\n            },\n          x: {\n            grid: {\n              display: false\n            },\n          }\n        }\n      },\n    };\n    // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\n    return new Chart(ctx, config);\n  }\n\n  var initialChart4 = function() {\n    var ctx = document.getElementById('ti_overview_chart_demo_4');\n\n    var color1 = TI_Util.getCssVariableValue('--bs-text-primary');\n\n    const labels = [\n      '15/3',\n      '16/3',\n      '17/3',\n      '18/3',\n      '19/3'\n    ];\n    // Chart data\n    const data = {\n      labels: labels,\n      datasets: [\n        {\n          label: 'data1',\n          data: [\n              152,\n              163,\n              336,\n              631,\n              503,\n              845,\n              804,\n          ],\n          backgroundColor: color1\n          \n        }\n      ]\n    };\n    const config = {\n      type: 'bar',\n      data: data,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        elements: {\n          bar: {\n            borderWidth: 2,\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          },\n          title: {\n            display: false\n          },\n          // ChartJs labels plugins: see https://github.com/DavideViolante/chartjs-plugin-labels/\n          labels: {\n            render: 'value',\n            precision: 0,\n            // textMargin: -6,\n            // textHorizontalMargin: 12\n          }\n        },\n        scales: {\n          y: {\n            \n            title: {\n              display: true,\n              text: '(Người)'\n            }\n            },\n          x: {\n            grid: {\n              display: false\n            },\n          }\n        }\n      },\n    };\n    // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\n    return new Chart(ctx, config);\n  }\n  var initialChart5 = function() {\n    var ctx = document.getElementById('ti_doughnut_chart_demo_5');\n    var legend_container_id = ctx.getAttribute('data-legend-container');\n\n    // Define fonts\n    var fontFamily = TI_Util.getCssVariableValue('--bs-font-sans-serif');\n\n    // Chart labels\n    const labels = [\n      'Khoa học công nghệ - Thông tin', \n      'Khoa Tài chính - Ngân hàng', \n      'Khoa Kế toán - Kiểm toán', \n      'Khoa Ngoại ngữ', \n      'Khoa Luật'];\n\n    // Chart data\n    const data = {\n        labels: labels,\n        datasets: [{\n            label: 'Chart 5',\n            data: [\n                20,\n                10,\n                28,\n                30,\n                12\n            ],\n            backgroundColor: [\n                '#034EA2', \n                '#387EC1',\n                '#6DABE5',\n                '#B8D2EC',\n                '#7E7E7E'\n            ],\n            hoverOffset: 4\n          }]\n    };\n    const config = {\n      type: 'doughnut',\n      data: data,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n            title: {\n                display: false,\n            },\n            legend: {\n                position: 'right',\n                labels: {\n                    font: {\n                        size: 18\n                    }\n                }\n            },\n            // ChartJs labels plugins: see https://github.com/DavideViolante/chartjs-plugin-labels/\n            labels: {\n                // render: function(args) {\n                //     return args.value.label;\n                // },\n                render: 'percentage',\n                fontColor: '#fff',\n                fontSize: 18,\n                textShadow: true,\n                arc: false,\n                precision: 0\n            }\n        },\n        cutout: '30%',\n      },\n      defaults:{\n          global: {\n              defaultFont: fontFamily\n          }\n      }\n    };\n    if (legend_container_id) {\n      config.options.plugins.legend.display = false;\n      config.options.plugins.htmlLegend = {\n        // ID of the container to put the legend in\n        containerID: legend_container_id,\n      };\n      if (!Array.isArray(config.plugins)) {\n        config.plugins = [];\n      }\n      config.plugins.push(htmlLegendPlugin);\n    }\n    // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\n    return new Chart(ctx, config);\n  }\n\n  var initialChart6 = function() {\n    var ctx = document.getElementById('ti_doughnut_chart_demo_6');\n    var legend_container_id = ctx.getAttribute('data-legend-container');\n\n    // Define colors\n    var primaryColor = TI_Util.getCssVariableValue('--bs-primary');\n    var dangerColor = TI_Util.getCssVariableValue('--bs-danger');\n    var successColor = TI_Util.getCssVariableValue('--bs-success');\n    var infoColor = TI_Util.getCssVariableValue('--bs-info');\n\n    // Define fonts\n    var fontFamily = TI_Util.getCssVariableValue('--bs-font-sans-serif');\n\n    // Chart labels\n    const labels = ['Đang liên hệ', 'Đang nộp hồ sơ', 'Sinh viên chính thức', 'Thí sinh từ chối'];\n\n  \n\n    // Chart data\n    const data = {\n        labels: labels,\n        datasets: [{\n            label: 'DEMO CHART',\n            data: [\n                10,\n                20,\n                30,\n                40\n            ],\n            backgroundColor: [\n                primaryColor, \n                dangerColor,\n                successColor,\n                infoColor,\n            ],\n            hoverOffset: 4\n          }]\n    };\n\n    // Chart config\n    const config = {\n        type: 'doughnut',\n        data: data,\n        options: {\n            plugins: {\n                title: {\n                    display: false,\n                },\n                legend: {\n                    position: 'right',\n                    labels: {\n                        font: {\n                            size: 18\n                        }\n                    }\n                },\n                // ChartJs labels plugins: see https://github.com/DavideViolante/chartjs-plugin-labels/\n                labels: {\n                    render: 'percentage',\n                    fontColor: '#fff',\n                    fontSize: 18,\n                    textShadow: true,\n                    arc: false,\n                    precision: 0\n                }\n            },\n            cutout: '30%',\n            responsive: true,\n            maintainAspectRatio: false,\n        },\n        defaults:{\n            global: {\n                defaultFont: fontFamily\n            }\n        }\n    };\n    \n    if (legend_container_id) {\n      config.options.plugins.legend.display = false;\n      config.options.plugins.htmlLegend = {\n        // ID of the container to put the legend in\n        containerID: legend_container_id,\n      };\n      if (!Array.isArray(config.plugins)) {\n        config.plugins = [];\n      }\n      config.plugins.push(htmlLegendPlugin);\n    }\n\n    // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\n    return new Chart(ctx, config);\n  }\n\n  return {\n    init: function() {\n    //   initialChart();\n      initialChart2();\n      initialChart3();\n    //   initialChart4();\n    //   initialChart5();\n      initialChart6();\n    }\n  }\n}();\n// On document ready\nTI_Util.onDOMContentLoaded(function () {\n\tTI_Overview.init();\n});"],"file":"kpi-detail.js"}
